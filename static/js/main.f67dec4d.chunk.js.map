{"version":3,"sources":["components/sortingAlgorithms/sortingAlgorithms.jsx","components/visualizer/sortingDisplay/SortingDisplay.jsx","App.jsx","index.js"],"names":["swap","array","i","j","temp","quickSort","animations","quickHelper","length","arr","left","right","pivotIdx","pivot","leftWall","push","partition","heapify","n","max","mergeSortHelper","mid","Math","floor","m","idx","merge","mergeSort","sortByDigit","digit","output","Array","count","fill","pow","radixSort","numDigits","num","digits","getDigits","getLargestVal","shuffle","require","SortingDisplay","props","state","this","generateNewArray","setState","len","console","log","bubbleSort","animation","arrayBars","document","getElementsByClassName","leftIdx","rightIdx","leftBar","style","rightBar","setTimeout","backgroundColor","tempHeight","height","minIdx","selectionSort","finalOne","finalTwo","comparisons","comparison","leftComp","rightComp","insertionSort","compareIdx","swaps","compareBar","heapSort","countingSort","className","map","value","onClick","Component","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f67dec4d.chunk.js","sourcesContent":["function swap(array, i, j) {\r\n    const temp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = temp;\r\n}\r\n\r\nexport const insertionSort = array => {\r\n    let animations = [];\r\n    animations.push([0, []]);\r\n\r\n    for (let i = 1; i < array.length; i++) {\r\n        let animation = []\r\n        let temp = array[i], j = i - 1;\r\n\r\n        while (j >= 0 && array[j] > temp) {\r\n            animation.push([j, j + 1]);\r\n            array[j + 1] = array[j];\r\n            j -= 1;\r\n        }\r\n\r\n        array[j + 1] = temp;\r\n        animations.push([i, animation]);\r\n    }\r\n\r\n    return animations;\r\n}\r\n\r\nexport const selectionSort = array => {\r\n    let animations = [], len = array.length;\r\n\r\n    for (let i = 0; i < len - 1; i++) {\r\n        let minIdx = i, j = 0;\r\n        let animation = [];\r\n\r\n        for (j = i + 1; j < len; j++) {\r\n            animation.push([j, minIdx]);\r\n\r\n            if (array[j] < array[minIdx]) {\r\n                minIdx = j;\r\n            }\r\n        }\r\n\r\n        animations.push([i, minIdx, animation]);\r\n\r\n        swap(array, i, minIdx);\r\n    }\r\n\r\n    return animations;\r\n}\r\n\r\nexport const bubbleSort = array => {\r\n    let animations = [], len = array.length;\r\n\r\n    for (let i = 0; i < len-1; i++) {\r\n        for (let j = 0; j < len - i - 1; j++) {\r\n            animations.push([j, j + 1, 0]);\r\n\r\n            if (array[j] > array[j + 1]) {\r\n                swap(array, j, j + 1);\r\n\r\n                animations.push([j, j + 1, 1])\r\n            }\r\n        }\r\n    }\r\n\r\n    console.log(array);\r\n\r\n    return animations;\r\n}\r\n\r\nexport const quickSort = array => {\r\n    let animations = [];\r\n    quickHelper(array, 0, array.length - 1, animations);\r\n\r\n    return animations;\r\n}\r\n\r\nfunction partition(arr, left, right, animations) {\r\n    let pivot = arr[right];\r\n    let leftWall = left - 1\r\n\r\n    for (let i = left; i < right; i++) {\r\n        if (arr[i] < pivot) {\r\n            leftWall++;\r\n            animations.push([leftWall, i]);\r\n            swap(arr, leftWall, i);\r\n        }\r\n    }\r\n\r\n    animations.push([leftWall + 1, right]);\r\n    swap(arr, leftWall + 1, right);\r\n\r\n    return leftWall + 1;\r\n}\r\n\r\nfunction quickHelper(arr, left, right, animations) {\r\n    if (left < right) {\r\n        let pivotIdx = partition(arr, left, right, animations);\r\n        quickHelper(arr, left, pivotIdx - 1, animations);\r\n        quickHelper(arr, pivotIdx + 1, right, animations);\r\n    }\r\n\r\n    return animations;\r\n}\r\n\r\nfunction heapify(array, n, i, animations) {\r\n    let left = 2 * i + 1, right = 2 * i + 2;\r\n    let max = i;\r\n\r\n    if (left < n && array[max] < array[left]) {\r\n        max = left;\r\n    }\r\n\r\n    if (right < n && array[max] < array[right]) {\r\n        max = right;\r\n    }\r\n\r\n    if (max !== i) {\r\n        animations.push([i, max]);\r\n        swap(array, i, max);\r\n        heapify(array, n, max, animations);\r\n    }\r\n}\r\n\r\nexport const heapSort = array => {\r\n    let animations = [];\r\n    let n = array.length;\r\n\r\n    for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\r\n        heapify(array, n, i, animations);\r\n    }\r\n\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        swap(array, 0, i);\r\n        animations.push([0, i]);\r\n        heapify(array, i, 0, animations);\r\n    }\r\n\r\n    return animations;\r\n}\r\n\r\nfunction merge(array, left, mid, right, animations) {\r\n    let i = left, m = mid, j = mid + 1;\r\n\r\n    if (array[mid] <= array[j]) {\r\n        return;\r\n    }\r\n\r\n    while (i <= m && j <= right) {\r\n        if (array[i] <= array[j]) {\r\n            i++;\r\n        } else {\r\n            let temp = array[j];\r\n            let idx = j;\r\n\r\n            while (idx !== i) {\r\n                animations.push([idx - 1, idx])\r\n                array[idx] = array[idx - 1];\r\n                idx--;\r\n            }\r\n\r\n            array[i] = temp;\r\n            i++;\r\n            m++;\r\n            j++;\r\n        }\r\n    }\r\n}\r\n\r\nfunction mergeSortHelper(array, left, right, animations) {\r\n    if (left < right) {\r\n        let mid = Math.floor((left + right) / 2);\r\n\r\n        mergeSortHelper(array, left, mid, animations);\r\n        mergeSortHelper(array, mid + 1, right, animations);\r\n\r\n        merge(array, left, mid, right, animations);\r\n    }\r\n}\r\n\r\nexport const mergeSort = array => {\r\n    let animations = [];\r\n\r\n    mergeSortHelper(array, 0, array.length - 1, animations);\r\n\r\n    return animations;\r\n}\r\n\r\nfunction getDigits(num) {\r\n    let temp = num;\r\n    let digits = 0;\r\n\r\n    while (temp > 0) {\r\n        digits++;\r\n        temp = Math.floor(temp / 10);\r\n    }\r\n\r\n    return digits;\r\n}\r\n\r\nfunction getLargestVal(array) {\r\n    let max = array[0];\r\n\r\n    for (let i = 1; i < array.length; i++) {\r\n        if (array[i] > max) {\r\n            max = array[i];\r\n        }\r\n    }\r\n\r\n    return max;\r\n}\r\n\r\nexport const countingSort = array => {\r\n    let output = new Array(array.length);\r\n    let count = new Array(256).fill(0);\r\n\r\n    for (let i = 0; i < array.length; i++)\r\n        count[array[i]]++;\r\n\r\n    for (let i = 1; i <= 255; i++)\r\n        count[i] += count[i - 1];\r\n\r\n    for (let i = array.length - 1; i >= 0; i--) {\r\n        output[count[array[i]] - 1] = array[i];\r\n        count[array[i]]--;\r\n    }\r\n\r\n    for (let i = 0; i < array.length; i++)\r\n        array[i] = output[i];\r\n\r\n    return array;\r\n}\r\n\r\nfunction sortByDigit(digit, array, animations) {\r\n    let output = new Array(array.length);\r\n    let count = new Array(10).fill(0);\r\n\r\n    for (let i = 0; i < array.length; i++) {\r\n        count[Math.floor(array[i] / Math.pow(10, digit - 1)) % 10]++;\r\n    }\r\n\r\n    for (let i = 1; i < 10; i++) {\r\n        count[i] += count[i - 1];\r\n    }\r\n\r\n    for (let i = array.length - 1; i >= 0; i--) {\r\n        output[count[Math.floor(array[i] / Math.pow(10, digit - 1)) % 10] - 1] = array[i];\r\n        count[Math.floor(array[i] / Math.pow(10, digit - 1)) % 10]--;\r\n    }\r\n\r\n    for (let i = 0; i < array.length; i++) {\r\n        array[i] = output[i];\r\n    }\r\n\r\n    animations.push(array);\r\n}\r\n\r\nexport const radixSort = array => {\r\n    let animations = [];\r\n    let numDigits = getDigits(getLargestVal(array));\r\n\r\n    for (let i = 1; i <= numDigits; i++) {\r\n        sortByDigit(i, array, animations);\r\n    }\r\n\r\n    return animations;\r\n}","import \"./SortingDisplay.scss\"\r\nimport React, { Component } from \"react\"\r\nimport {\r\n    insertionSort,\r\n    selectionSort,\r\n    bubbleSort,\r\n    quickSort,\r\n    heapSort,\r\n    mergeSort,\r\n    countingSort,\r\n    radixSort\r\n} from \"../../sortingAlgorithms/sortingAlgorithms\";\r\n\r\nlet shuffle = require('shuffle-array');\r\n\r\nexport default class SortingDisplay extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.generateNewArray();\r\n    }\r\n\r\n    generateNewArray() {\r\n        let array = [];\r\n\r\n        for (let i = 1; i <= 100; i++) {\r\n            array.push(i);\r\n        }\r\n\r\n        shuffle(array);\r\n        this.setState({array});\r\n    }\r\n\r\n    bubbleSort() {\r\n        const animations = bubbleSort(this.state.array);\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const animation = animations[i];\r\n            const arrayBars = document.getElementsByClassName('array-element');\r\n            const [leftIdx, rightIdx, swap] = animation;\r\n            const leftBar = arrayBars[leftIdx].style;\r\n            const rightBar = arrayBars[rightIdx].style;\r\n            console.log(animation);\r\n\r\n            setTimeout(() => {\r\n                leftBar.backgroundColor = \"blue\";\r\n                rightBar.backgroundColor = \"blue\";\r\n\r\n                setTimeout(() => {\r\n                    if (swap) {\r\n                        const tempHeight = leftBar.height;\r\n                        leftBar.height = rightBar.height;\r\n                        rightBar.height = tempHeight;\r\n                    }\r\n\r\n                    leftBar.backgroundColor = \"coral\";\r\n                    rightBar.backgroundColor = \"coral\";\r\n                }, 1)\r\n\r\n            }, i * 5);\r\n        }\r\n    }\r\n\r\n    quickSort() {\r\n        const animations = quickSort(this.state.array);\r\n        console.log(animations);\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const animation = animations[i];\r\n            const arrayBars = document.getElementsByClassName('array-element');\r\n            const [left, right] = animation;\r\n\r\n            setTimeout(() => {\r\n                const leftBar = arrayBars[left].style;\r\n                const rightBar = arrayBars[right].style;\r\n\r\n                const tempHeight = leftBar.height;\r\n                leftBar.height = rightBar.height;\r\n                rightBar.height = tempHeight;\r\n            }, i * 50);\r\n        }\r\n    }\r\n\r\n    selectionSort() {\r\n        const animations = selectionSort(this.state.array);\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const animation = animations[i];\r\n            const arrayBars = document.getElementsByClassName('array-element');\r\n            const [finalOne, finalTwo, comparisons] = animation;\r\n\r\n            setTimeout(() => {\r\n                const leftBar = arrayBars[finalOne].style;\r\n                const rightBar = arrayBars[finalTwo].style;\r\n\r\n                for (let j = 0; j < comparisons.length; j++) {\r\n                    const comparison = comparisons[j];\r\n\r\n                    setTimeout(() => {\r\n                        const leftComp = arrayBars[comparison[0]].style;\r\n                        const rightComp = arrayBars[comparison[1]].style;\r\n\r\n                        leftComp.backgroundColor = \"blue\";\r\n                        rightComp.backgroundColor = \"green\";\r\n\r\n                        setTimeout(() => {\r\n                            leftComp.backgroundColor = \"coral\";\r\n                            rightComp.backgroundColor = \"coral\";\r\n                        }, 10)\r\n                    }, j * (500 / comparisons.length + 1))\r\n                }\r\n\r\n                setTimeout(() => {\r\n                    const leftBar = arrayBars[animation[0]].style;\r\n                    const rightBar = arrayBars[animation[1]].style;\r\n                    const tempHeight = leftBar.height;\r\n                    leftBar.height = rightBar.height;\r\n                    rightBar.height = tempHeight;\r\n                }, 500);\r\n            }, i * 500);\r\n\r\n        }\r\n    }\r\n\r\n    insertionSort() {\r\n        const animations = insertionSort(this.state.array);\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const animation = animations[i];\r\n            const arrayBars = document.getElementsByClassName('array-element');\r\n            const [compareIdx, swaps] = animation;\r\n            const compareBar = arrayBars[compareIdx].style;\r\n\r\n            setTimeout(() => {\r\n                compareBar.backgroundColor = \"green\";\r\n\r\n                for (let j = 0; j < swaps.length; j++) {\r\n                    setTimeout(() => {\r\n                        const swap = swaps[j];\r\n                        const leftBar = arrayBars[swap[0]].style;\r\n                        const rightBar = arrayBars[swap[1]].style;\r\n                        const tempHeight = leftBar.height;\r\n                        leftBar.height = rightBar.height;\r\n                        rightBar.height = tempHeight;\r\n                    }, j * (500 / swaps.length))\r\n                }\r\n                setTimeout(() => {\r\n                    compareBar.backgroundColor = \"purple\";\r\n                }, 500)\r\n            }, i * 500)\r\n        }\r\n    }\r\n\r\n    mergeSort() {\r\n        const animations = mergeSort(this.state.array);\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-element');\r\n            const [leftIdx, rightIdx] = animations[i];\r\n\r\n            setTimeout(() => {\r\n                const leftBar = arrayBars[leftIdx].style;\r\n                const rightBar = arrayBars[rightIdx].style;\r\n\r\n                const tempHeight = leftBar.height;\r\n                leftBar.height = rightBar.height;\r\n                rightBar.height = tempHeight;\r\n            }, i * 50)\r\n        }\r\n    }\r\n\r\n    heapSort() {\r\n        const animations = heapSort(this.state.array);\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-element');\r\n            const [leftIdx, rightIdx] = animations[i];\r\n\r\n            setTimeout(() => {\r\n                const leftBar = arrayBars[leftIdx].style;\r\n                const rightBar = arrayBars[rightIdx].style;\r\n\r\n                const tempHeight = leftBar.height;\r\n                leftBar.height = rightBar.height;\r\n                rightBar.height = tempHeight;\r\n            }, i * 50)\r\n        }\r\n    }\r\n\r\n    countingSort() {\r\n        const animations = countingSort(this.state.array);\r\n\r\n        const arrayBars = document.getElementsByClassName('array-element');\r\n\r\n        for (let j = 0; j < animations.length; j++) {\r\n            arrayBars[j].style.height = `${animations[j] * 4}px`;\r\n        }\r\n    }\r\n\r\n    radixSort() {\r\n        const animations = radixSort(this.state.array);\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-element');\r\n\r\n            for (let j = 0; j < animations[i].length; j++) {\r\n                arrayBars[j].style.height = `${animations[i][j] * 4}px`;\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {array} = this.state;\r\n\r\n        return (\r\n            <div className=\"total-container\">\r\n                <div className=\"array-container\">\r\n                    {array.map((value, idx) => (\r\n                        <div\r\n                            className=\"array-element\"\r\n                            key={idx}\r\n                            style={{height: `${value * 4}px`}}\r\n                        />\r\n                    ))}\r\n                </div>\r\n                <div className=\"algorithms\">\r\n                    <button\r\n                        onClick={() => this.bubbleSort()}\r\n                        className=\"algorithm\"\r\n                    >\r\n                        Bubble\r\n                    </button>\r\n                    <button\r\n                        onClick={() => this.quickSort()}\r\n                        className=\"algorithm\"\r\n                    >\r\n                        Quick\r\n                    </button>\r\n                    <button\r\n                        onClick={() => this.selectionSort()}\r\n                        className=\"algorithm\"\r\n                    >\r\n                        Selection\r\n                    </button>\r\n                    <button\r\n                        onClick={() => this.insertionSort()}\r\n                        className=\"algorithm\"\r\n                    >\r\n                        Insertion\r\n                    </button>\r\n                    <button\r\n                        onClick={() => this.mergeSort()}\r\n                        className=\"algorithm\"\r\n                    >\r\n                        Merge\r\n                    </button>\r\n                    <button\r\n                        onClick={() => this.heapSort()}\r\n                        className=\"algorithm\"\r\n                    >\r\n                        Heap\r\n                    </button>\r\n                    <button\r\n                        onClick={() => this.countingSort()}\r\n                        className=\"algorithm\"\r\n                    >\r\n                        Counting\r\n                    </button>\r\n                    <button\r\n                        onClick={() => this.radixSort()}\r\n                        className=\"algorithm\"\r\n                    >\r\n                        Radix\r\n                    </button>\r\n                </div>\r\n                <div className=\"button-container\">\r\n                    <button onClick={() => this.generateNewArray()} >Generate New Array</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","import './App.scss';\nimport SortingDisplay from \"./components/visualizer/sortingDisplay/SortingDisplay\"\n\nfunction App() {\n    return (\n        <div className=\"app\">\n            <SortingDisplay />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}